// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.11.2
// source: kv.proto

package kvrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetInCausalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Timestamp   int64            `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetInCausalRequest) Reset() {
	*x = GetInCausalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInCausalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInCausalRequest) ProtoMessage() {}

func (x *GetInCausalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInCausalRequest.ProtoReflect.Descriptor instead.
func (*GetInCausalRequest) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{0}
}

func (x *GetInCausalRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetInCausalRequest) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *GetInCausalRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetInCausalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Success     bool             `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GetInCausalResponse) Reset() {
	*x = GetInCausalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInCausalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInCausalResponse) ProtoMessage() {}

func (x *GetInCausalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInCausalResponse.ProtoReflect.Descriptor instead.
func (*GetInCausalResponse) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{1}
}

func (x *GetInCausalResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetInCausalResponse) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *GetInCausalResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PutInCausalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,3,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Timestamp   int64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PutInCausalRequest) Reset() {
	*x = PutInCausalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutInCausalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutInCausalRequest) ProtoMessage() {}

func (x *PutInCausalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutInCausalRequest.ProtoReflect.Descriptor instead.
func (*PutInCausalRequest) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{2}
}

func (x *PutInCausalRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutInCausalRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PutInCausalRequest) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *PutInCausalRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PutInCausalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PutInCausalResponse) Reset() {
	*x = PutInCausalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutInCausalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutInCausalResponse) ProtoMessage() {}

func (x *PutInCausalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutInCausalResponse.ProtoReflect.Descriptor instead.
func (*PutInCausalResponse) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{3}
}

func (x *PutInCausalResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PutInCausalResponse) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

type GetInWritelessCausalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                                                                                          //键信息
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //客户端向量时钟
	Timestamp   int64            `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetInWritelessCausalRequest) Reset() {
	*x = GetInWritelessCausalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInWritelessCausalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInWritelessCausalRequest) ProtoMessage() {}

func (x *GetInWritelessCausalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInWritelessCausalRequest.ProtoReflect.Descriptor instead.
func (*GetInWritelessCausalRequest) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{4}
}

func (x *GetInWritelessCausalRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetInWritelessCausalRequest) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *GetInWritelessCausalRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetInWritelessCausalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Success     bool             `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GetInWritelessCausalResponse) Reset() {
	*x = GetInWritelessCausalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInWritelessCausalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInWritelessCausalResponse) ProtoMessage() {}

func (x *GetInWritelessCausalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInWritelessCausalResponse.ProtoReflect.Descriptor instead.
func (*GetInWritelessCausalResponse) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{5}
}

func (x *GetInWritelessCausalResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetInWritelessCausalResponse) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *GetInWritelessCausalResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PutInWritelessCausalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,3,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Timestamp   int64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PutInWritelessCausalRequest) Reset() {
	*x = PutInWritelessCausalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutInWritelessCausalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutInWritelessCausalRequest) ProtoMessage() {}

func (x *PutInWritelessCausalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutInWritelessCausalRequest.ProtoReflect.Descriptor instead.
func (*PutInWritelessCausalRequest) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{6}
}

func (x *PutInWritelessCausalRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutInWritelessCausalRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PutInWritelessCausalRequest) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *PutInWritelessCausalRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PutInWritelessCausalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PutInWritelessCausalResponse) Reset() {
	*x = PutInWritelessCausalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutInWritelessCausalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutInWritelessCausalResponse) ProtoMessage() {}

func (x *PutInWritelessCausalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutInWritelessCausalResponse.ProtoReflect.Descriptor instead.
func (*PutInWritelessCausalResponse) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{7}
}

func (x *PutInWritelessCausalResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PutInWritelessCausalResponse) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

type GetInWritelessStrongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                                                                                          //键信息
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //客户端向量时钟
	Timestamp   int64            `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetInWritelessStrongRequest) Reset() {
	*x = GetInWritelessStrongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInWritelessStrongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInWritelessStrongRequest) ProtoMessage() {}

func (x *GetInWritelessStrongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInWritelessStrongRequest.ProtoReflect.Descriptor instead.
func (*GetInWritelessStrongRequest) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{8}
}

func (x *GetInWritelessStrongRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetInWritelessStrongRequest) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *GetInWritelessStrongRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetInWritelessStrongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value       string           `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Success     bool             `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GetInWritelessStrongResponse) Reset() {
	*x = GetInWritelessStrongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInWritelessStrongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInWritelessStrongResponse) ProtoMessage() {}

func (x *GetInWritelessStrongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInWritelessStrongResponse.ProtoReflect.Descriptor instead.
func (*GetInWritelessStrongResponse) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{9}
}

func (x *GetInWritelessStrongResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetInWritelessStrongResponse) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *GetInWritelessStrongResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PutInWritelessStrongRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value       string           `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,3,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Timestamp   int64            `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PutInWritelessStrongRequest) Reset() {
	*x = PutInWritelessStrongRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutInWritelessStrongRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutInWritelessStrongRequest) ProtoMessage() {}

func (x *PutInWritelessStrongRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutInWritelessStrongRequest.ProtoReflect.Descriptor instead.
func (*PutInWritelessStrongRequest) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{10}
}

func (x *PutInWritelessStrongRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutInWritelessStrongRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PutInWritelessStrongRequest) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

func (x *PutInWritelessStrongRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PutInWritelessStrongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Vectorclock map[string]int32 `protobuf:"bytes,2,rep,name=vectorclock,proto3" json:"vectorclock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PutInWritelessStrongResponse) Reset() {
	*x = PutInWritelessStrongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutInWritelessStrongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutInWritelessStrongResponse) ProtoMessage() {}

func (x *PutInWritelessStrongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutInWritelessStrongResponse.ProtoReflect.Descriptor instead.
func (*PutInWritelessStrongResponse) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{11}
}

func (x *PutInWritelessStrongResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PutInWritelessStrongResponse) GetVectorclock() map[string]int32 {
	if x != nil {
		return x.Vectorclock
	}
	return nil
}

var File_kv_proto protoreflect.FileDescriptor

var file_kv_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x12, 0x50,
	0x75, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0x3e, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb8, 0x01, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x47, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x43, 0x61,
	0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61, 0x75,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x0b,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61,
	0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x3e,
	0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4,
	0x01, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x50, 0x75,
	0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61, 0x75, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x1c, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x50, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xde, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe0, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x01, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x49, 0x6e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f,
	0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x3e, 0x0a,
	0x10, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x01,
	0x0a, 0x1c, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xd8, 0x03, 0x0a, 0x02, 0x4b,
	0x56, 0x12, 0x3a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c,
	0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0b, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x12, 0x13, 0x2e, 0x50,
	0x75, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61,
	0x6c, 0x12, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x12, 0x1c, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43, 0x61, 0x75, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x12,
	0x1c, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x14, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x6c, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x6b, 0x76, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kv_proto_rawDescOnce sync.Once
	file_kv_proto_rawDescData = file_kv_proto_rawDesc
)

func file_kv_proto_rawDescGZIP() []byte {
	file_kv_proto_rawDescOnce.Do(func() {
		file_kv_proto_rawDescData = protoimpl.X.CompressGZIP(file_kv_proto_rawDescData)
	})
	return file_kv_proto_rawDescData
}

var file_kv_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_kv_proto_goTypes = []interface{}{
	(*GetInCausalRequest)(nil),           // 0: GetInCausalRequest
	(*GetInCausalResponse)(nil),          // 1: GetInCausalResponse
	(*PutInCausalRequest)(nil),           // 2: PutInCausalRequest
	(*PutInCausalResponse)(nil),          // 3: PutInCausalResponse
	(*GetInWritelessCausalRequest)(nil),  // 4: GetInWritelessCausalRequest
	(*GetInWritelessCausalResponse)(nil), // 5: GetInWritelessCausalResponse
	(*PutInWritelessCausalRequest)(nil),  // 6: PutInWritelessCausalRequest
	(*PutInWritelessCausalResponse)(nil), // 7: PutInWritelessCausalResponse
	(*GetInWritelessStrongRequest)(nil),  // 8: GetInWritelessStrongRequest
	(*GetInWritelessStrongResponse)(nil), // 9: GetInWritelessStrongResponse
	(*PutInWritelessStrongRequest)(nil),  // 10: PutInWritelessStrongRequest
	(*PutInWritelessStrongResponse)(nil), // 11: PutInWritelessStrongResponse
	nil,                                  // 12: GetInCausalRequest.VectorclockEntry
	nil,                                  // 13: GetInCausalResponse.VectorclockEntry
	nil,                                  // 14: PutInCausalRequest.VectorclockEntry
	nil,                                  // 15: PutInCausalResponse.VectorclockEntry
	nil,                                  // 16: GetInWritelessCausalRequest.VectorclockEntry
	nil,                                  // 17: GetInWritelessCausalResponse.VectorclockEntry
	nil,                                  // 18: PutInWritelessCausalRequest.VectorclockEntry
	nil,                                  // 19: PutInWritelessCausalResponse.VectorclockEntry
	nil,                                  // 20: GetInWritelessStrongRequest.VectorclockEntry
	nil,                                  // 21: GetInWritelessStrongResponse.VectorclockEntry
	nil,                                  // 22: PutInWritelessStrongRequest.VectorclockEntry
	nil,                                  // 23: PutInWritelessStrongResponse.VectorclockEntry
}
var file_kv_proto_depIdxs = []int32{
	12, // 0: GetInCausalRequest.vectorclock:type_name -> GetInCausalRequest.VectorclockEntry
	13, // 1: GetInCausalResponse.vectorclock:type_name -> GetInCausalResponse.VectorclockEntry
	14, // 2: PutInCausalRequest.vectorclock:type_name -> PutInCausalRequest.VectorclockEntry
	15, // 3: PutInCausalResponse.vectorclock:type_name -> PutInCausalResponse.VectorclockEntry
	16, // 4: GetInWritelessCausalRequest.vectorclock:type_name -> GetInWritelessCausalRequest.VectorclockEntry
	17, // 5: GetInWritelessCausalResponse.vectorclock:type_name -> GetInWritelessCausalResponse.VectorclockEntry
	18, // 6: PutInWritelessCausalRequest.vectorclock:type_name -> PutInWritelessCausalRequest.VectorclockEntry
	19, // 7: PutInWritelessCausalResponse.vectorclock:type_name -> PutInWritelessCausalResponse.VectorclockEntry
	20, // 8: GetInWritelessStrongRequest.vectorclock:type_name -> GetInWritelessStrongRequest.VectorclockEntry
	21, // 9: GetInWritelessStrongResponse.vectorclock:type_name -> GetInWritelessStrongResponse.VectorclockEntry
	22, // 10: PutInWritelessStrongRequest.vectorclock:type_name -> PutInWritelessStrongRequest.VectorclockEntry
	23, // 11: PutInWritelessStrongResponse.vectorclock:type_name -> PutInWritelessStrongResponse.VectorclockEntry
	0,  // 12: KV.GetInCausal:input_type -> GetInCausalRequest
	2,  // 13: KV.PutInCausal:input_type -> PutInCausalRequest
	4,  // 14: KV.GetInWritelessCausal:input_type -> GetInWritelessCausalRequest
	6,  // 15: KV.PutInWritelessCausal:input_type -> PutInWritelessCausalRequest
	8,  // 16: KV.GetInWritelessStrong:input_type -> GetInWritelessStrongRequest
	10, // 17: KV.PutInWritelessStrong:input_type -> PutInWritelessStrongRequest
	1,  // 18: KV.GetInCausal:output_type -> GetInCausalResponse
	3,  // 19: KV.PutInCausal:output_type -> PutInCausalResponse
	5,  // 20: KV.GetInWritelessCausal:output_type -> GetInWritelessCausalResponse
	7,  // 21: KV.PutInWritelessCausal:output_type -> PutInWritelessCausalResponse
	9,  // 22: KV.GetInWritelessStrong:output_type -> GetInWritelessStrongResponse
	11, // 23: KV.PutInWritelessStrong:output_type -> PutInWritelessStrongResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_kv_proto_init() }
func file_kv_proto_init() {
	if File_kv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInCausalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInCausalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutInCausalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutInCausalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInWritelessCausalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInWritelessCausalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutInWritelessCausalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutInWritelessCausalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInWritelessStrongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInWritelessStrongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutInWritelessStrongRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutInWritelessStrongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kv_proto_goTypes,
		DependencyIndexes: file_kv_proto_depIdxs,
		MessageInfos:      file_kv_proto_msgTypes,
	}.Build()
	File_kv_proto = out.File
	file_kv_proto_rawDesc = nil
	file_kv_proto_goTypes = nil
	file_kv_proto_depIdxs = nil
}
