// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: strong.proto

package strongrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	STRONG_PreCommit_FullMethodName = "/STRONG/PreCommit"
	STRONG_Commit_FullMethodName    = "/STRONG/Commit"
)

// STRONGClient is the client API for STRONG service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type STRONGClient interface {
	PreCommit(ctx context.Context, in *PreCommitRequest, opts ...grpc.CallOption) (*PreCommitResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
}

type sTRONGClient struct {
	cc grpc.ClientConnInterface
}

func NewSTRONGClient(cc grpc.ClientConnInterface) STRONGClient {
	return &sTRONGClient{cc}
}

func (c *sTRONGClient) PreCommit(ctx context.Context, in *PreCommitRequest, opts ...grpc.CallOption) (*PreCommitResponse, error) {
	out := new(PreCommitResponse)
	err := c.cc.Invoke(ctx, STRONG_PreCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sTRONGClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, STRONG_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// STRONGServer is the server API for STRONG service.
// All implementations must embed UnimplementedSTRONGServer
// for forward compatibility
type STRONGServer interface {
	PreCommit(context.Context, *PreCommitRequest) (*PreCommitResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	mustEmbedUnimplementedSTRONGServer()
}

// UnimplementedSTRONGServer must be embedded to have forward compatible implementations.
type UnimplementedSTRONGServer struct {
}

func (UnimplementedSTRONGServer) PreCommit(context.Context, *PreCommitRequest) (*PreCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreCommit not implemented")
}
func (UnimplementedSTRONGServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedSTRONGServer) mustEmbedUnimplementedSTRONGServer() {}

// UnsafeSTRONGServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to STRONGServer will
// result in compilation errors.
type UnsafeSTRONGServer interface {
	mustEmbedUnimplementedSTRONGServer()
}

func RegisterSTRONGServer(s grpc.ServiceRegistrar, srv STRONGServer) {
	s.RegisterService(&STRONG_ServiceDesc, srv)
}

func _STRONG_PreCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STRONGServer).PreCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: STRONG_PreCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STRONGServer).PreCommit(ctx, req.(*PreCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _STRONG_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(STRONGServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: STRONG_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(STRONGServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// STRONG_ServiceDesc is the grpc.ServiceDesc for STRONG service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var STRONG_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "STRONG",
	HandlerType: (*STRONGServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PreCommit",
			Handler:    _STRONG_PreCommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _STRONG_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "strong.proto",
}
